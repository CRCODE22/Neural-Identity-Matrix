# Copyright (C) 2025 CRCODE22
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.0
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.init as init
import torch.optim as optim
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import gradio as gr
import plotly.express as px
import time
from datetime import datetime, timedelta
import os
import pickle

# Set random seed for reproducibility
np.random.seed(42)
torch.manual_seed(42)

# Define the Identity Generator Neural Network
class IdentityGenerator(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(IdentityGenerator, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(input_dim, hidden_dim),  # 19 → 128
            nn.ReLU(),
            nn.Linear(hidden_dim, hidden_dim // 2),  # 128 → 64
            nn.ReLU(),
            nn.Linear(hidden_dim // 2, hidden_dim // 4),  # 64 → 32
            nn.ReLU(),
        )
        self.decoder = nn.Sequential(
            nn.Linear(hidden_dim // 4, hidden_dim // 2),  # 32 → 64
            nn.ReLU(),
            nn.Linear(hidden_dim // 2, hidden_dim),  # 64 → 128
            nn.ReLU(),
            nn.Linear(hidden_dim, output_dim),  # 128 → 19
            nn.Sigmoid()  # Ensure outputs are in [0, 1]
        )
        self._initialize_weights()

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Linear):
                init.xavier_uniform_(m.weight)
                if m.bias is not None:
                    init.zeros_(m.bias)

    def forward(self, x):
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        return decoded

# Function to generate synthetic dataset
def generate_synthetic_dataset(num_samples=5000):
    data = {
        'Hair color': np.random.choice(['Blonde', 'Brown', 'Black', 'Red'], num_samples),
        'Eye color': np.random.choice(['Blue', 'Green', 'Brown', 'Hazel'], num_samples),
        'Body type': np.random.choice(['Slim', 'Athletic', 'Curvy'], num_samples),
        'Bra/cup size': np.random.choice(['A', 'B', 'C', 'D'], num_samples),
        'Boobs': np.random.choice(['Natural', 'Enhanced'], num_samples),
        'Firstname': np.random.choice(['Emma', 'Olivia', 'Ava', 'Sophia', 'Amelia', 'Charlotte'], num_samples),
        'Lastname': np.random.choice(['Smith', 'Johnson', 'Brown', 'Taylor', 'Wilson'], num_samples),
        'Nickname': np.random.choice(['Em', 'Liv', 'Ava', 'Sophie', 'Amy', 'Charlie', 'Bella'], num_samples),
        'Birthplace': np.random.choice(['New York, USA', 'London, UK', 'Paris, France', 'Tokyo, Japan'], num_samples),
        'Nationality': np.random.choice(['American', 'British', 'French', 'Japanese', 'Australian'], num_samples),
        'Ethnicity': np.random.choice(['Caucasian', 'Asian', 'African', 'Mixed'], num_samples),
        'Profession': np.random.choice(['Doctor', 'Engineer', 'Artist', 'Teacher', 'Designer'], num_samples),
        'Age': np.random.uniform(20, 40, num_samples),
        'Height': np.random.uniform(150, 180, num_samples),
        'Weight': np.random.uniform(45, 80, num_samples),
        'Body Measurements': [f"{np.random.randint(80, 100)}-{np.random.randint(55, 65)}-{np.random.randint(85, 105)}" for _ in range(num_samples)],
    }
    df = pd.DataFrame(data)
    df['Born'] = pd.to_datetime(df['Age'].apply(lambda age: datetime.now() - timedelta(days=age * 365)))
    df['Born'] = df['Born'].dt.strftime('%Y-%m-%d')

    numerical_columns = ['Age', 'Height', 'Weight']
    for col in df.columns:
        if df[col].isna().any():
            print(f"Warning: NaN values found in generated data column: {col}")
            df[col] = df[col].fillna('Unknown' if col not in numerical_columns else df[col].mean())
    
    for col in numerical_columns:
        if np.any(np.isinf(df[col].astype(float))):
            print(f"Warning: Infinite values found in generated data column: {col}")
            df[col] = df[col].replace([np.inf, -np.inf], df[col].mean())

    return df

# Preprocess the dataset
def preprocess_data(df):
    print("Preprocessing data...")
    print("Before preprocessing (first 5 rows):")
    print(df.head())
    print("NaN check before preprocessing:", df.isna().sum())
    print("Dtypes before preprocessing:", df.dtypes)

    # Ensure numerical columns are clean
    numerical_columns = ['Age', 'Height', 'Weight']
    for col in numerical_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')  # Convert to numeric, NaN for invalid
        df[col] = df[col].fillna(df[col].mean())  # Fill NaN with mean
        df[col] = df[col].replace([np.inf, -np.inf], df[col].mean())  # Replace inf with mean

    # Ensure Body Measurements is a string
    print("Checking Body Measurements column format...")
    for idx, m in enumerate(df['Body Measurements']):
        if isinstance(m, list):
            # Convert list of scaled values back to string format
            # First, inverse scale the measurements to original range
            measurements = np.array(m)
            measurements = (measurements * (np.array([20, 10, 20]))) + np.array([80, 55, 85])
            df.at[idx, 'Body Measurements'] = f"{int(measurements[0])}-{int(measurements[1])}-{int(measurements[2])}"
        elif not isinstance(m, str):
            print(f"Unexpected type for Body Measurements at index {idx}: {type(m)}")
            df.at[idx, 'Body Measurements'] = "90-60-90"  # Fallback

    le_dict = {}
    categorical_columns = ['Hair color', 'Eye color', 'Body type', 'Bra/cup size', 'Boobs', 'Firstname', 'Lastname', 'Nickname', 'Birthplace', 'Nationality', 'Ethnicity', 'Profession', 'Born']
    for col in categorical_columns:
        le = LabelEncoder()
        df[col] = df[col].astype(str)
        try:
            df[col] = le.fit_transform(df[col])
            le_dict[col] = le
        except Exception as e:
            print(f"Error encoding column {col}: {e}")
            raise

    scaler_age = MinMaxScaler()
    scaler_height = MinMaxScaler()
    scaler_weight = MinMaxScaler()
    scaler_measurements = MinMaxScaler()

    try:
        df['Age'] = scaler_age.fit_transform(df[['Age']])
        df['Height'] = scaler_height.fit_transform(df[['Height']])
        df['Weight'] = scaler_weight.fit_transform(df[['Weight']])
    except Exception as e:
        print(f"Error scaling numerical columns: {e}")
        raise

    # Process Body Measurements
    try:
        measurements = np.array([list(map(int, m.split('-'))) for m in df['Body Measurements']])
        measurements = np.nan_to_num(measurements, nan=np.nanmean(measurements), posinf=np.nanmean(measurements), neginf=np.nanmean(measurements))
        measurements_scaled = scaler_measurements.fit_transform(measurements)
        df['Body Measurements'] = measurements_scaled.tolist()
    except Exception as e:
        print(f"Error scaling body measurements: {e}")
        # Save the dataset for debugging
        df.to_csv("debug_preprocess_failure.csv", index=False)
        raise

    print("After preprocessing (first 5 rows):")
    print(df.head())
    print("NaN check after preprocessing:", df.isna().sum())
    print("Dtypes after preprocessing:", df.dtypes)

    return df, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements

# Convert data to tensor
def df_to_tensor(df):
    categorical_columns = ['Hair color', 'Eye color', 'Body type', 'Bra/cup size', 'Boobs', 'Firstname', 'Lastname', 'Nickname', 'Birthplace', 'Nationality', 'Ethnicity', 'Profession', 'Born']
    numerical_columns = ['Age', 'Height', 'Weight']
    features = df[categorical_columns + numerical_columns].values
    measurements = np.array(df['Body Measurements'].tolist())
    features = np.hstack((features, measurements))
    print(f"df_to_tensor: Feature shape: {features.shape}")

    scaler_features = MinMaxScaler()
    try:
        # Replace NaN and inf before scaling
        features = np.nan_to_num(features, nan=np.nanmean(features), posinf=np.nanmean(features), neginf=np.nanmean(features))
        features = scaler_features.fit_transform(features)
    except Exception as e:
        print(f"Error normalizing features: {e}")
        raise

    nan_mask = np.isnan(features)
    inf_mask = np.isinf(features)
    if np.any(nan_mask) or np.any(inf_mask):
        print("NaN values found in features:", features[nan_mask])
        print("Infinite values found in features:", features[inf_mask])
        raise ValueError("Features contain NaN or infinite values")

    return torch.FloatTensor(features), scaler_features

# Train the model with self-improvement cycles
def train_model(resume=False, le_dict=None, scaler_age=None, scaler_height=None, scaler_weight=None, scaler_measurements=None, scaler_features=None, df=None):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    input_dim = 19
    hidden_dim = 128
    output_dim = 19
    model = IdentityGenerator(input_dim, hidden_dim, output_dim).to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.00005, weight_decay=1e-5)

    if resume and os.path.exists("checkpoint_model.pth"):
        try:
            checkpoint = torch.load("checkpoint_model.pth")
            model.load_state_dict(checkpoint['model_state_dict'])
            optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
            df = pd.read_csv("checkpoint_dataset.csv")
            with open("checkpoint_encoders.pkl", "rb") as f:
                checkpoint_encoders = pickle.load(f)
                le_dict = checkpoint_encoders['le_dict']
                scaler_age = checkpoint_encoders['scaler_age']
                scaler_height = checkpoint_encoders['scaler_height']
                scaler_weight = checkpoint_encoders['scaler_weight']
                scaler_measurements = checkpoint_encoders['scaler_measurements']
                scaler_features = checkpoint_encoders['scaler_features']
            yield None, None, 0, "Resumed from checkpoint", []
            yield model, device, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features
            return
        except Exception as e:
            print(f"Error loading checkpoint: {e}")
            yield None, None, 0, f"Failed to resume: {e}", []
            return

    num_cycles = 5
    epochs_per_cycle = 50
    batch_size = 32
    cycle_progress_range = 50 / num_cycles

    print(f"Starting training with dataset size: {len(df)}")
    try:
        data_tensor, scaler_features = df_to_tensor(df)
        data_tensor = data_tensor.to(device)
    except Exception as e:
        print(f"Error converting data to tensor: {e}")
        yield None, None, 0, f"Data preparation failed: {e}", []
        return
    print(f"Data tensor shape: {data_tensor.shape}")

    initial_loss = None
    loss_history = []
    for cycle in range(num_cycles):
        print(f"Self-Improvement Cycle {cycle + 1}")
        cycle_start_progress = cycle * cycle_progress_range
        yield None, None, cycle_start_progress, f"Starting Cycle {cycle + 1}", loss_history
        for epoch in range(epochs_per_cycle):
            num_batches = len(df) // batch_size
            epoch_loss = 0.0
            for batch in range(num_batches):
                start_idx = batch * batch_size
                end_idx = start_idx + batch_size
                batch_data = data_tensor[start_idx:end_idx]

                optimizer.zero_grad()
                outputs = model(batch_data)
                loss = criterion(outputs, batch_data)
                loss.backward()
                torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
                optimizer.step()

                epoch_loss += loss.item()

            time.sleep(0.05)

            avg_epoch_loss = epoch_loss / num_batches
            if np.isnan(avg_epoch_loss) or np.isinf(avg_epoch_loss):
                status = f"Training stopped due to NaN/Inf loss in Cycle {cycle + 1}, Epoch {epoch + 1}"
                print(status)
                yield None, None, cycle_start_progress, status, loss_history
                return

            if epoch == 0 and cycle == 0:
                initial_loss = avg_epoch_loss
            loss_history.append(avg_epoch_loss)
            epoch_progress = (epoch + 1) / epochs_per_cycle * cycle_progress_range
            total_progress = cycle_start_progress + epoch_progress
            status = f"Training Model (Cycle {cycle + 1}, Epoch {epoch + 1}/{epochs_per_cycle}) - Avg Loss: {avg_epoch_loss:.4f}"
            print(status)
            yield None, None, total_progress, status, loss_history

        num_new_identities = np.random.randint(50, 200)
        try:
            new_identities = generate_synthetic_dataset(num_new_identities)
            print(f"New identities generated (first 5 rows):")
            print(new_identities.head())
            print(f"Dataset before concat (first 5 rows):")
            print(df.head())
            # Convert Body Measurements back to string format if it's a list
            df['Body Measurements'] = df['Body Measurements'].apply(
                lambda m: f"{int(m[0]*20 + 80)}-{int(m[1]*10 + 55)}-{int(m[2]*20 + 85)}" if isinstance(m, list) else m
            )
            df = pd.concat([df, new_identities], ignore_index=True)
            print(f"Dataset after concat (first 5 rows):")
            print(df.head())
            df, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements = preprocess_data(df)
            print(f"Added {num_new_identities} new identities. Total dataset size: {len(df)}")
            data_tensor, scaler_features = df_to_tensor(df)
            data_tensor = data_tensor.to(device)
            print(f"Data tensor shape: {data_tensor.shape}")
        except Exception as e:
            print(f"Error in self-improvement cycle {cycle + 1}: {e}")
            yield None, None, cycle_start_progress, f"Cycle {cycle + 1} failed: {e}", loss_history
            return

        try:
            torch.save({
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
            }, "checkpoint_model.pth")
            df.to_csv("checkpoint_dataset.csv", index=False)
            with open("checkpoint_encoders.pkl", "wb") as f:
                pickle.dump({
                    'le_dict': le_dict,
                    'scaler_age': scaler_age,
                    'scaler_height': scaler_height,
                    'scaler_weight': scaler_weight,
                    'scaler_measurements': scaler_measurements,
                    'scaler_features': scaler_features,
                }, f)
            print("Saved training state to checkpoint_* files.")
        except Exception as e:
            print(f"Error saving checkpoint: {e}")
        yield None, None, (cycle + 1) * cycle_progress_range, f"Cycle {cycle + 1} Complete", loss_history

    final_loss = avg_epoch_loss
    status = f"Training Complete. Initial Loss: {initial_loss:.4f}, Final Loss: {final_loss:.4f}"
    print(status)
    yield None, None, 50, status, loss_history
    yield model, device, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features

# Generate a new identity
def generate_identity(model, device, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features):
    model.eval()
    with torch.no_grad():
        noise = torch.randn(1, 19).to(device) * 3.0
        generated = model(noise).cpu().numpy()[0]

    generated_full = np.zeros((1, 19))
    generated_full[0, :16] = generated[:16]
    generated_full[0, 16:19] = generated[16:19]
    try:
        generated_full = scaler_features.inverse_transform(generated_full)[0]
    except Exception as e:
        print(f"Error denormalizing features: {e}")
        return None

    identity = {}
    categorical_columns = ['Hair color', 'Eye color', 'Body type', 'Bra/cup size', 'Boobs', 'Firstname', 'Lastname', 'Nickname', 'Birthplace', 'Nationality', 'Ethnicity', 'Profession', 'Born']
    for idx, col in enumerate(categorical_columns):
        le = le_dict.get(col)
        if le is None:
            print(f"Warning: LabelEncoder missing for column {col}")
            continue
        value = generated_full[idx]
        num_classes = len(le.classes_)
        value = np.clip(value, 0, num_classes - 1)
        identity[col] = le.inverse_transform([int(value)])[0]

    identity['Age'] = scaler_age.inverse_transform([[generated_full[13]]])[0][0]
    identity['Height'] = scaler_height.inverse_transform([[generated_full[14]]])[0][0]
    identity['Weight'] = scaler_weight.inverse_transform([[generated_full[15]]])[0][0]

    measurements = generated_full[16:19]
    try:
        measurements = scaler_measurements.inverse_transform([measurements])[0]
        measurements = np.clip(measurements, [80, 55, 85], [100, 65, 105])
        identity['Body Measurements'] = f"{int(measurements[0])}-{int(measurements[1])}-{int(measurements[2])}"
    except Exception as e:
        print(f"Error scaling measurements: {e}")
        identity['Body Measurements'] = "90-60-90"

    try:
        age = identity['Age']
        born_date = datetime.now() - timedelta(days=age * 365)
        identity['Born'] = born_date.strftime('%Y-%m-%d')
    except Exception as e:
        print(f"Error calculating Born: {e}")
        identity['Born'] = (datetime.now() - timedelta(days=30 * 365)).strftime('%Y-%m-%d')

    identity['Age'] = max(20, min(40, identity['Age']))
    identity['Height'] = max(150, min(180, identity['Height']))
    identity['Weight'] = max(45, min(80, identity['Weight']))

    return identity

# Filter generated identities
def filter_identity(identity):
    try:
        if identity['Age'] < 18 or identity['Height'] < 140 or identity['Weight'] < 40:
            return False
        return True
    except Exception as e:
        print(f"Error filtering identity: {e}")
        return False

# Gradio interface function
def generate_identities_gui(num_identities, resume_training, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features, df):
    print(f"Starting identity generation: num_identities={num_identities}, resume_training={resume_training}")
    yield None, None, 0, "Starting Training...", None

    train_gen = train_model(resume=resume_training, le_dict=le_dict, scaler_age=scaler_age, scaler_height=scaler_height, scaler_weight=scaler_weight, scaler_measurements=scaler_measurements, scaler_features=scaler_features, df=df)
    model = None
    device = None

    for train_output in train_gen:
        if isinstance(train_output, tuple) and len(train_output) == 8:
            model, device, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features = train_output
            yield None, None, 50, "Model Loaded - Starting Generation", None
            break
        _, _, progress, status, loss_history = train_output
        if loss_history:
            loss_df = pd.DataFrame({
                'Epoch': range(1, len(loss_history) + 1),
                'Loss': loss_history
            })
            fig = px.line(loss_df, x='Epoch', y='Loss', title="Training Loss Over Time")
            fig.update_layout(
                plot_bgcolor='rgba(10, 10, 40, 0.8)',
                paper_bgcolor='rgba(10, 10, 40, 0.8)',
                font_color='#00ffcc',
                title_font_color='#00ffcc',
                xaxis=dict(gridcolor='rgba(0, 230, 230, 0.2)'),
                yaxis=dict(gridcolor='rgba(0, 230, 230, 0.2)')
            )
            loss_plot = fig
        else:
            loss_plot = None
        yield None, None, progress, status, loss_plot

    if model is None:
        yield None, None, 50, "Training failed - cannot generate identities", None
        return

    identities = []
    num_identities = int(num_identities)
    for i in range(num_identities):
        progress_value = 50 + (i / num_identities) * 25
        status = f"Generating Identity {i+1}/{num_identities}"
        yield None, None, progress_value, status, None
        try:
            identity = generate_identity(model, device, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features)
            if identity:
                print(f"Generated Identity {i+1}: {identity}")
                identities.append(identity)
        except Exception as e:
            print(f"Error generating identity {i+1}: {e}")

    filtered_identities = []
    for i, identity in enumerate(identities):
        progress_value = 75 + (i / len(identities)) * 25
        status = f"Filtering Identity {i+1}/{len(identities)}"
        yield None, None, progress_value, status, None
        if filter_identity(identity):
            filtered_identities.append(identity)

    print(f"Generated {num_identities} identities, {len(filtered_identities)} passed the filter.")
    if filtered_identities:
        df_identities = pd.DataFrame(filtered_identities)
        df_identities['Age'] = df_identities['Age'].round(0).astype(int)
        df_identities['Height'] = df_identities['Height'].round(0).astype(int)
        df_identities['Weight'] = df_identities['Weight'].round(0).astype(int)
        df_identities['Body Measurements'] = df_identities['Body Measurements'].apply(
            lambda x: '-'.join(str(int(float(v))) for v in x.split('-'))
        )
        print("DataFrame columns:", df_identities.columns.tolist())
        csv_path = "generated_cha_identities.csv"
        df_identities.to_csv(csv_path, index=False)
        yield df_identities, csv_path, 100, "Generation Complete", None
    else:
        yield None, None, 100, "Generation Complete - No valid identities", None

# Wrapper for Gradio
def generate_identities_gui_wrapper(num_identities, resume_training):
    try:
        df = generate_synthetic_dataset()
        df, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements = preprocess_data(df)
        data_tensor, scaler_features = df_to_tensor(df)
        yield from generate_identities_gui(num_identities, resume_training, le_dict, scaler_age, scaler_height, scaler_weight, scaler_measurements, scaler_features, df)
    except Exception as e:
        print(f"Error in GUI wrapper: {e}")
        yield None, None, 0, f"Initialization failed: {e}", None

# Custom CSS with embedded fonts (replace placeholders with base64 strings)
custom_css = """
@font-face {
    font-family: 'Orbitron';
    src: url('data:font/ttf;base64,') format('truetype');
    font-weight: 400;
    font-style: normal;
}
@font-face {
    font-family: 'Orbitron';
    src: url('data:font/ttf;base64,') format('truetype');
    font-weight: 700;
    font-style: normal;
}
/* Override Gradio's default font stack to prevent fallback font loading */
body, .gradio-container, .gradio-container * {
    font-family: 'Orbitron', 'Arial', sans-serif !important;
}
body {
    background: linear-gradient(135deg, #0d0d2b 0%, #1a1a4d 100%);
    color: #00e6e6;
    position: relative;
    overflow: hidden;
}
.gradio-container {
    max-width: 1200px;
    margin: auto;
    border: 2px solid #00e6e6;
    border-radius: 15px;
    box-shadow: 0 0 20px rgba(0, 230, 230, 0.5);
    background: rgba(10, 10, 40, 0.8);
    padding: 20px;
    position: relative;
    z-index: 1;
}
h1 {
    text-align: center;
    color: #00ffcc;
    text-shadow: 0 0 15px #00ffcc, 0 0 30px #00e6e6;
    animation: neon-glow 1.5s ease-in-out infinite alternate;
}
h2, h3 {
    text-align: center;
    color: #00ffcc;
    text-shadow: 0 0 10px #00ffcc;
}
button {
    background: #1a1a4d;
    color: #00e6e6;
    border: 2px solid #00e6e6;
    border-radius: 10px;
    padding: 10px 20px;
    transition: all 0.3s ease;
    animation: holographic 2s infinite;
}
button:hover {
    background: #00e6e6;
    color: #0d0d2b;
    box-shadow: 0 0 25px #00e6e6, 0 0 50px #00ffcc;
    transform: scale(1.1);
}
@keyframes holographic {
    0% { box-shadow: 0 0 5px #00e6e6, inset 0 0 5px #00ffcc; }
    50% { box-shadow: 0 0 25px #00e6e6, inset 0 0 25px #00ffcc; }
    100% { box-shadow: 0 0 5px #00e6e6, inset 0 0 5px #00ffcc; }
}
@keyframes neon-glow {
    from { text-shadow: 0 0 10px #00ffcc, 0 0 20px #00e6e6; }
    to { text-shadow: 0 0 20px #00ffcc, 0 0 40px #00e6e6; }
}
.dataframe-container {
    width: 100% !important;
    max-width: 100% !important;
    overflow-x: auto !important;
    background: rgba(20, 20, 60, 0.9);
    border: 1px solid #00e6e6;
    border-radius: 10px;
    animation: fadeIn 1s ease-in;
    padding: 10px;
    box-sizing: border-box;
}
.dataframe table {
    width: 100%;
    border-collapse: collapse;
    table-layout: auto !important;
}
.dataframe th, .dataframe td {
    padding: 8px;
    text-align: left;
    border: 1px solid #00e6e6;
    white-space: normal !important;
    word-wrap: break-word;
    max-width: 150px;
    min-width: 100px;
    overflow: hidden;
    text-overflow: ellipsis;
}
.dataframe th {
    background: rgba(0, 230, 230, 0.1);
    position: sticky;
    top: 0;
    z-index: 1;
}
@keyframes fadeIn {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
}
#neural-activity {
    margin-top: 20px;
    height: 80px;
    background: rgba(10, 10, 40, 0.8);
    border: 1px solid #00e6e6;
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}
.neural-node {
    position: absolute;
    background: #00ffcc;
    border-radius: 50%;
    width: 10px;
    height: 10px;
    animation: moveNode 5s infinite linear;
}
@keyframes moveNode {
    0% { transform: translate(0, 0); opacity: 0.8; }
    50% { opacity: 0.3; }
    100% { transform: translate(1000px, 100px); opacity: 0.8; }
}
#neural-network-3d {
    margin-top: 20px;
    height: 200px;
    background: rgba(10, 10, 40, 0.8);
    border: 1px solid #00e6e6;
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}
#neural-network-3d canvas {
    width: 100% !important;
    height: 100% !important;
}
.static-3d-fallback {
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, #00e6e6, #00ffcc);
    border-radius: 10px;
    animation: staticPulse 3s infinite;
    position: relative;
    overflow: hidden;
}
.static-3d-fallback::before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    background: #00ffcc;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation: staticNode 2s infinite;
}
@keyframes staticPulse {
    0% { opacity: 0.5; }
    50% { opacity: 0.8; }
    100% { opacity: 0.5; }
}
@keyframes staticNode {
    0% { transform: translate(-50%, -50%) scale(1); }
    50% { transform: translate(-50%, -50%) scale(1.5); }
    100% { transform: translate(-50%, -50%) scale(1); }
}
.visualization-error {
    text-align: center;
    color: #ff5555;
    padding: 10px;
    font-size: 14px;
}
#loader {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 50px;
    height: 50px;
    border: 5px solid #00e6e6;
    border-top: 5px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 1000;
}
@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}
.slider-container {
    margin: 10px 0;
}
.slider-container .slider {
    background: rgba(10, 10, 40, 0.8);
    border: 2px solid #00e6e6;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 230, 230, 0.5);
}
.slider-container .slider::-webkit-slider-thumb {
    background: linear-gradient(90deg, #00e6e6, #00ffcc);
    border: 2px solid #00ffcc;
    box-shadow: 0 0 10px #00ffcc;
    animation: glow 2s infinite;
}
.slider-container .slider::-moz-range-thumb {
    background: linear-gradient(90deg, #00e6e6, #00ffcc);
    border: 2px solid #00ffcc;
    box-shadow: 0 0 10px #00ffcc;
    animation: glow 2s infinite;
}
@keyframes glow {
    0% { box-shadow: 0 0 5px #00e6e6; }
    50% { box-shadow: 0 0 20px #00ffcc; }
    100% { box-shadow: 0 0 5px #00e6e6; }
}
#status-message {
    text-align: center;
    color: #00ffcc;
    text-shadow: 0 0 5px #00ffcc;
    margin: 10px 0;
}
#loss-plot {
    margin-top: 20px;
    background: rgba(10, 10, 40, 0.8);
    border: 1px solid #00e6e6;
    border-radius: 10px;
    padding: 10px;
}
#matrix-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    opacity: 0.5;
    filter: drop-shadow(0 0 5px #00ffcc);
}
"""

# Create Gradio interface
with gr.Blocks(css=custom_css) as demo:
    gr.HTML(f"""
    <script src="data:application/javascript;base64,"></script>
    <script>
        if (typeof THREE === 'undefined') {{
            console.error("Failed to load Three.js from embedded base64 data");
        }} else {{
            console.log("Three.js loaded successfully from base64!");
        }}
    </script>
    <script>
        (function() {{
            console.log("Setting up font loading...");
            // Font loading fallback
            const fontTest = new FontFace('Orbitron', 'url(data:font/ttf;base64,)');
            fontTest.load().catch((error) => {{
                console.error("Failed to load Orbitron font:", error);
                document.body.style.fontFamily = "'Arial', sans-serif";
                const warning = document.createElement('div');
                warning.style.color = '#ff5555';
                warning.style.textAlign = 'center';
                warning.style.padding = '10px';
                warning.textContent = 'Failed to load Orbitron font. Falling back to Arial.';
                document.body.insertBefore(warning, document.body.firstChild);
            }});
        }})();

        function waitForDOM() {{
            return new Promise((resolve) => {{
                if (document.readyState === "complete" || document.readyState === "interactive") {{
                    resolve();
                }} else {{
                    document.addEventListener('DOMContentLoaded', resolve);
                }}
            }});
        }}

        async function initializeApp() {{
            await waitForDOM();
            console.log("DOM fully loaded - Initializing app...");

            function waitForElement(id, callback, timeout = 30000, interval = 500) {{
                const startTime = Date.now();
                const attempt = () => {{
                    const element = document.getElementById(id);
                    if (element) {{
                        console.log(`Element ${{id}} found after ${{Date.now() - startTime}}ms!`);
                        callback(element);
                    }} else if (Date.now() - startTime >= timeout) {{
                        console.error(`Element ${{id}} not found after ${{timeout}}ms.`);
                        const errorDiv = document.createElement('div');
                        errorDiv.id = 'visualization-error-' + id;
                        errorDiv.className = 'visualization-error';
                        errorDiv.textContent = `Failed to load visualization for ${{id}}.`;
                        document.body.appendChild(errorDiv);
                    }} else {{
                        setTimeout(attempt, interval);
                    }}
                }};
                attempt();
            }}

            function startNeuralAnimation() {{
                waitForElement('neural-activity', (container) => {{
                    try {{
                        console.log("Starting 2D Neural Animation...");
                        container.innerHTML = '';
                        for (let i = 0; i < 10; i++) {{
                            const node = document.createElement('div');
                            node.className = 'neural-node';
                            node.style.left = Math.random() * 100 + '%';
                            node.style.top = Math.random() * 100 + '%';
                            node.style.animationDelay = Math.random() * 5 + 's';
                            container.appendChild(node);
                        }}
                        setInterval(() => {{
                            container.style.boxShadow = '0 0 ' + (Math.random() * 20 + 10) + 'px #00e6e6';
                        }}, 1000);
                    }} catch (error) {{
                        console.error("Error in startNeuralAnimation:", error);
                        container.innerHTML = '<div class="visualization-error">Failed to load 2D neural animation: ' + error.message + '</div>';
                    }}
                }});
            }}

            function start3DNeuralNetwork() {{
                waitForElement('neural-network-3d', (container) => {{
                    try {{
                        console.log("Starting 3D Neural Network Visualization...");
                        console.log("THREE:", typeof THREE);

                        const canvas = document.createElement('canvas');
                        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
                        if (!gl) {{
                            throw new Error("WebGL is not supported in your browser. Please use a modern browser with WebGL enabled.");
                        }}

                        if (typeof THREE === 'undefined') {{
                            throw new Error("Three.js failed to load. Falling back to static animation.");
                        }}

                        const scene = new THREE.Scene();
                        const camera = new THREE.PerspectiveCamera(75, container.clientWidth / 200, 0.1, 1000);
                        const renderer = new THREE.WebGLRenderer({{ antialias: true, alpha: true }});
                        renderer.setSize(container.clientWidth, 200);
                        container.appendChild(renderer.domElement);

                        const layers = [
                            {{ neurons: 4, x: -150 }},
                            {{ neurons: 3, x: -50 }},
                            {{ neurons: 2, x: 50 }},
                            {{ neurons: 1, x: 150 }}
                        ];

                        const nodes = [];
                        const edges = [];
                        const pulses = [];

                        layers.forEach((layer, layerIndex) => {{
                            const neurons = [];
                            for (let i = 0; i < layer.neurons; i++) {{
                                const y = (i - (layer.neurons - 1) / 2) * 50;
                                const geometry = new THREE.SphereGeometry(5, 16, 16);
                                const material = new THREE.MeshBasicMaterial({{ color: 0x00ffcc }});
                                const sphere = new THREE.Mesh(geometry, material);
                                sphere.position.set(layer.x, y, 0);
                                scene.add(sphere);
                                neurons.push(sphere);
                            }}
                            nodes.push(neurons);
                        }});

                        for (let l = 0; l < layers.length - 1; l++) {{
                            for (let i = 0; i < layers[l].neurons; i++) {{
                                for (let j = 0; j < layers[l + 1].neurons; j++) {{
                                    const start = nodes[l][i].position;
                                    const end = nodes[l + 1][j].position;
                                    const geometry = new THREE.BufferGeometry().setFromPoints([start, end]);
                                    const material = new THREE.LineBasicMaterial({{ color: 0x00e6e6, transparent: true, opacity: 0.3 }});
                                    const line = new THREE.Line(geometry, material);
                                    scene.add(line);
                                    edges.push({{ line, start, end }});
                                }}
                            }}
                        }}

                        function createPulse(start, end) {{
                            const geometry = new THREE.SphereGeometry(3, 8, 8);
                            const material = new THREE.MeshBasicMaterial({{ color: 0x00ffcc, transparent: true, opacity: 0.8 }});
                            const pulse = new THREE.Mesh(geometry, material);
                            pulse.position.copy(start);
                            scene.add(pulse);
                            return {{ pulse, start, end, t: 0 }};
                        }}

                        camera.position.z = 300;

                        function animate() {{
                            requestAnimationFrame(animate);

                            if (Math.random() < 0.05) {{
                                const edge = edges[Math.floor(Math.random() * edges.length)];
                                pulses.push(createPulse(edge.start, edge.end));
                            }}

                            pulses.forEach((pulse, index) => {{
                                pulse.t += 0.02;
                                if (pulse.t > 1) {{
                                    scene.remove(pulse.pulse);
                                    pulses.splice(index, 1);
                                    return;
                                }}
                                pulse.pulse.position.lerpVectors(pulse.start, pulse.end, pulse.t);
                                pulse.pulse.material.opacity = 0.8 * (1 - pulse.t);
                            }});

                            scene.rotation.y += 0.005;
                            renderer.render(scene, camera);
                        }}
                        animate();

                        window.addEventListener('resize', () => {{
                            renderer.setSize(container.clientWidth, 200);
                            camera.aspect = container.clientWidth / 200;
                            camera.updateProjectionMatrix();
                        }});
                    }} catch (error) {{
                        console.error("Error in start3DNeuralNetwork:", error);
                        container.innerHTML = '<div class="visualization-error">Failed to initialize 3D visualization: ' + error.message + '</div>';
                    }}
                }});
            }}

            function createMatrixRain() {{
                try {{
                    console.log("Starting Matrix Rain...");
                    const canvas = document.createElement('canvas');
                    canvas.id = 'matrix-bg';
                    document.body.appendChild(canvas);
                    const ctx = canvas.getContext('2d');
                    if (!ctx) {{
                        throw new Error("Canvas 2D context not supported.");
                    }}
                    canvas.height = window.innerHeight;
                    canvas.width = window.innerWidth;
                    const chars = '0123456789';
                    const fontSize = 14;
                    const columns = canvas.width / fontSize;
                    const drops = [];
                    for (let x = 0; x < columns; x++) {{
                        drops[x] = 1;
                    }}
                    function draw() {{
                        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.fillStyle = '#00ffcc';
                        ctx.font = fontSize + 'px monospace';
                        for (let i = 0; i < drops.length; i++) {{
                            const text = chars.charAt(Math.floor(Math.random() * chars.length));
                            ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                            if (drops[i] * fontSize > canvas.height && Math.random() > 0.975)
                                drops[i] = 0;
                            drops[i]++;
                        }}
                    }}
                    setInterval(draw, 33);
                }} catch (error) {{
                    console.error("Error in createMatrixRain:", error);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'visualization-error';
                    errorDiv.textContent = 'Failed to initialize Matrix Rain: ' + error.message;
                    document.body.appendChild(errorDiv);
                }}
            }}

            function showLoader() {{
                try {{
                    const loader = document.getElementById('loader');
                    if (loader) {{
                        loader.style.display = 'block';
                    }}
                }} catch (error) {{
                    console.error("Error in showLoader:", error);
                }}
            }}

            function hideLoader() {{
                try {{
                    const loader = document.getElementById('loader');
                    if (loader) {{
                        loader.style.display = 'none';
                    }}
                }} catch (error) {{
                    console.error("Error in hideLoader:", error);
                }}
            }}

            function updateProgressSmoothly() {{
                waitForElement('progress-bar', (slider) => {{
                    try {{
                        console.log("Setting up smooth progress bar animation...");
                        let lastValue = 0;
                        const updateInterval = setInterval(() => {{
                            const currentValue = parseFloat(slider.value);
                            if (currentValue !== lastValue) {{
                                let interpolated = lastValue;
                                const step = (currentValue - lastValue) / 10;
                                const smoothUpdate = setInterval(() => {{
                                    interpolated += step;
                                    if ((step > 0 && interpolated >= currentValue) || (step < 0 && interpolated <= currentValue)) {{
                                        interpolated = currentValue;
                                        clearInterval(smoothUpdate);
                                    }}
                                    slider.value = interpolated.toFixed(2);
                                    slider.dispatchEvent(new Event('input'));
                                }}, 50);
                                lastValue = currentValue;
                            }}
                        }}, 200);
                    }} catch (error) {{
                        console.error("Error in updateProgressSmoothly:", error);
                    }}
                }});
            }}

            function setupButtonListeners() {{
                waitForElement('generate-button', () => {{
                    try {{
                        console.log("Setting up button listeners...");
                        const buttons = document.getElementsByTagName('button');
                        let generateButton = null;
                        let clearButton = null;
                        for (let btn of buttons) {{
                            if (btn.textContent === 'Initialize Identity Generation') {{
                                generateButton = btn;
                            }} else if (btn.textContent === 'Clear Output') {{
                                clearButton = btn;
                            }}
                        }}
                        if (generateButton) {{
                            generateButton.id = 'generate-button';
                            generateButton.addEventListener('click', () => {{
                                showLoader();
                            }});
                        }}
                        if (clearButton) {{
                            clearButton.id = 'clear-button';
                            clearButton.addEventListener('click', () => {{
                                const outputDiv = document.querySelector('.dataframe');
                                if (outputDiv) {{
                                    outputDiv.innerHTML = '';
                                }}
                                const progressSlider = document.getElementById('progress-bar');
                                if (progressSlider) {{
                                    progressSlider.value = 0;
                                    progressSlider.dispatchEvent(new Event('input'));
                                }}
                                const statusMessage = document.getElementById('status-message');
                                if (statusMessage) {{
                                    statusMessage.textContent = 'Ready to Generate';
                                }}
                            }});
                        }}

                        const outputDiv = document.querySelector('.dataframe');
                        if (outputDiv) {{
                            const observer = new MutationObserver((mutations) => {{
                                mutations.forEach(() => {{
                                    hideLoader();
                                }});
                            }});
                            observer.observe(outputDiv, {{ childList: true, subtree: true }});
                        }}
                    }} catch (error) {{
                        console.error("Error in setupButtonListeners:", error);
                    }}
                }});
            }}

            function initializeVisualizations() {{
                console.log("Initializing visualizations...");
                startNeuralAnimation();
                start3DNeuralNetwork();
                createMatrixRain();
                setupButtonListeners();
                updateProgressSmoothly();
            }}

            initializeVisualizations();
        }}

        initializeApp().catch(error => {{
            console.error("Error initializing app:", error);
        }});
    </script>
    """)
    gr.HTML('<div id="loader"></div>')
    gr.Markdown("# Neural Identity Matrix")
    gr.Markdown("Generate futuristic clone identities with an evolving AI core.")
    num_identities = gr.Slider(minimum=1, maximum=10, value=10, step=1, label="Number of Identities to Generate")
    resume_training = gr.Checkbox(label="Resume Training from Checkpoint", value=False)
    with gr.Row():
        generate_button = gr.Button("Initialize Identity Generation")
        clear_button = gr.Button("Clear Output")
    progress_bar = gr.Slider(minimum=0, maximum=100, value=0, label="Progress", interactive=False, elem_id="progress-bar")
    status_message = gr.Markdown("Ready to Generate", elem_id="status-message")
    loss_plot = gr.Plot(label="Training Loss", elem_id="loss-plot")
    output = gr.Dataframe(label="Identity Matrix Output")
    download_button = gr.File(label="Download Identities as CSV", visible=False)
    gr.HTML('<div id="neural-activity"></div>')
    gr.HTML('<div id="neural-network-3d"></div>')
    gr.Markdown("**Core Status**: Active and Evolving")

    generate_button.click(
        fn=generate_identities_gui_wrapper,
        inputs=[num_identities, resume_training],
        outputs=[output, download_button, progress_bar, status_message, loss_plot],
        queue=True
    )

# Launch the Gradio app
demo.launch(
    root_path="/"
)
